(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"\nbody {\n    margin: 0;\n}\n.overlay {\n    position: fixed;\n    display: none;\n    background-color: rgba(104,104,104,0.8);\n    z-index: 1;\n    left: 0;\n    top: 0;\n    width: 100vw;\n    height: 100vh;\n    justify-content: center;\n    align-items: center;\n}\n#content {\n    display: grid;\n    grid-template-columns: 2fr 5fr;\n    grid-template-rows: .75fr 9fr;\n    min-height: 100vh;\n}\nheader {\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n    background-color: #3777FF;\n}\n.categories {\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    background-color: #e7e5e4;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n}\n.items {\n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n    background-color: #fcfcfc;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n.category-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border-radius: 15px;\n    height: 70vh;\n    width: 80%;\n}\n.category-title {\n    margin: 0;\n}\n.list-container {\n    width: 90%;\n    padding: 0;\n    gap: 25px;\n}\n.task-item {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: center;\n    justify-items: center;\n    flex-shrink: 1;\n    border: 2px black solid;\n    border-radius: 15px;\n    max-width: 90%;\n    max-height: 10vh;\n    margin: 1rem;\n}\n.add-item-container{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-around;\n    background-color: whitesmoke;\n    margin: auto;\n    padding: 1.5em;\n    width: 30vw;\n    height: 30vh;\n    font-size: 1.5rem;\n    border: 2px black solid;\n}\n.newTaskButton {\n    width: 25%;\n    min-width: 100px;\n    background-color: #3777FF;\n    border-radius: 10px;\n    margin: .8rem;\n}\n.category-list {\n    width: 80%;\n    padding: 0;\n    gap: 25px;\n    list-style-type: none;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:";AACA;IACI,SAAS;AACb;AACA;IACI,eAAe;IACf,aAAa;IACb,uCAAuC;IACvC,UAAU;IACV,OAAO;IACP,MAAM;IACN,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,6BAA6B;IAC7B,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,eAAe;IACf,yBAAyB;AAC7B;AACA;IACI,kBAAkB;IAClB,eAAe;IACf,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;;AAEvB;AACA;IACI,kBAAkB;IAClB,eAAe;IACf,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,mBAAmB;IACnB,YAAY;IACZ,UAAU;AACd;AACA;IACI,SAAS;AACb;AACA;IACI,UAAU;IACV,UAAU;IACV,SAAS;AACb;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,qBAAqB;IACrB,cAAc;IACd,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;IACd,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,6BAA6B;IAC7B,4BAA4B;IAC5B,YAAY;IACZ,cAAc;IACd,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,uBAAuB;AAC3B;AACA;IACI,UAAU;IACV,gBAAgB;IAChB,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,UAAU;IACV,UAAU;IACV,SAAS;IACT,qBAAqB;AACzB",sourcesContent:["\nbody {\n    margin: 0;\n}\n.overlay {\n    position: fixed;\n    display: none;\n    background-color: rgba(104,104,104,0.8);\n    z-index: 1;\n    left: 0;\n    top: 0;\n    width: 100vw;\n    height: 100vh;\n    justify-content: center;\n    align-items: center;\n}\n#content {\n    display: grid;\n    grid-template-columns: 2fr 5fr;\n    grid-template-rows: .75fr 9fr;\n    min-height: 100vh;\n}\nheader {\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n    background-color: #3777FF;\n}\n.categories {\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    background-color: #e7e5e4;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n}\n.items {\n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n    background-color: #fcfcfc;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n.category-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border-radius: 15px;\n    height: 70vh;\n    width: 80%;\n}\n.category-title {\n    margin: 0;\n}\n.list-container {\n    width: 90%;\n    padding: 0;\n    gap: 25px;\n}\n.task-item {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: center;\n    justify-items: center;\n    flex-shrink: 1;\n    border: 2px black solid;\n    border-radius: 15px;\n    max-width: 90%;\n    max-height: 10vh;\n    margin: 1rem;\n}\n.add-item-container{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-around;\n    background-color: whitesmoke;\n    margin: auto;\n    padding: 1.5em;\n    width: 30vw;\n    height: 30vh;\n    font-size: 1.5rem;\n    border: 2px black solid;\n}\n.newTaskButton {\n    width: 25%;\n    min-width: 100px;\n    background-color: #3777FF;\n    border-radius: 10px;\n    margin: .8rem;\n}\n.category-list {\n    width: 80%;\n    padding: 0;\n    gap: 25px;\n    list-style-type: none;\n}"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],l=r.base?s[0]+r.base:s[0],d=i[l]||0,A="".concat(l," ").concat(d);i[l]=d+1;var u=t(A),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var p=o(m,r);r.byIndex=c,n.splice(c,0,{identifier:A,updater:p,references:1})}a.push(A)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var s=r(e,o),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{class e{constructor(e,n,t,r){this.title=e,this.description=n,this.dueDate=t,this.priorityLevel=r,this.status="To Do",this.notes,this.checklist=[]}}class n{constructor(e){this.title=e,this.taskItems=[]}addItem(e){this.taskItems.push(e)}set allTasks(e){1==Array.isArray(e)&&(this.taskItems=e)}}function r(){const e={},t=JSON.parse(window.localStorage.getItem("categories"));for(const r in t){const o=new n(`${r}`),i=t[r].taskItems;for(const e of i)o.addItem(e);e[o.title]=o}return e}function o(e){const n=r()[e];window.localStorage.setItem("currentCategory",JSON.stringify(n))}var i=t(379),a=t.n(i),c=t(795),s=t.n(c),l=t(569),d=t.n(l),A=t(565),u=t.n(A),m=t(216),p=t.n(m),f=t(589),g=t.n(f),y=t(28),C={};let h,I,B,v;if(C.styleTagTransform=g(),C.setAttributes=u(),C.insert=d().bind(null,"head"),C.domAPI=s(),C.insertStyleElement=p(),a()(y.Z,C),y.Z&&y.Z.locals&&y.Z.locals,function(e){const n=document.createElement("header");n.innerHTML="task's";const t=document.createElement("div"),r=document.createElement("div"),o=[n,t,r];t.classList.add("categories"),r.classList.add("items"),o.forEach((n=>{e.appendChild(n)})),function(){const e=document.querySelector(".items"),n=document.createElement("button");n.type="button",n.classList.add("newTaskButton"),n.textContent="New Task",n.addEventListener("click",(()=>{document.querySelector("#task-overlay").style.display="flex"})),e.appendChild(n)}(),function(){const e=document.querySelector(".categories"),n=document.createElement("button");n.type="button",n.classList.add("newCategoryButton"),n.textContent="New Category",n.addEventListener("click",(()=>{document.querySelector("#category-overlay").style.display="flex"})),e.appendChild(n)}();const i=document.createElement("div"),a=document.createElement("h3"),c=document.createElement("ul");i.classList.add("category-container"),a.classList.add("category-title"),c.classList.add("list-container"),i.appendChild(a),i.appendChild(c),r.appendChild(i);const s=document.createElement("ul");s.classList.add("category-list"),t.appendChild(s)}(document.querySelector("#content")),null==window.localStorage.getItem("categories")){const e={title:"Default",taskItems:[]};I={Default:e},h=new n(e.title),window.localStorage.setItem("categories",JSON.stringify(I)),window.localStorage.setItem("currentCategory",JSON.stringify(e))}else B=JSON.parse(window.localStorage.getItem("currentCategory")),v=JSON.parse(window.localStorage.getItem("categories")),h=new n(B.title),h.taskItems=B.taskItems,I=r();!function(e){const n=document.querySelector(".category-list");for(;n.firstChild;)n.removeChild(n.firstChild);for(const t in e){let e=document.createElement("li");e.classList.add("category-name"),e.innerHTML=`${t}`,n.appendChild(e)}}(I),function(e,n){const t=document.querySelector(".list-container"),r=(document.querySelector(".category-container"),document.querySelector(".category-title"));for(;t.firstChild;)t.removeChild(t.firstChild);r.innerHTML=e,n.forEach((e=>{!function(e,n,t){const r=document.createElement("li"),o=document.createElement("div"),i=document.createElement("div");o.innerHTML=n,i.innerHTML=t,[o,i].forEach((e=>{r.appendChild(e)})),r.classList.add("task-item"),e.appendChild(r)}(t,e.title,e.date)}))}(h.title,h.taskItems),function(n){const t=document.querySelector(".add-task-button"),i=document.querySelector("#task-form"),a=document.querySelector("#task-overlay"),c=(document.querySelector(".category-title").innerHTML,n);t.addEventListener("click",(()=>{const n=function(){const e=document.querySelector("#taskTitle"),n=document.querySelector("#taskDescription"),t=document.querySelector("#taskDueDate");return{title:e.value,description:n.value,date:t.value}}();!function(e,n){const t=r();t[e].taskItems.push(n),window.localStorage.categories=JSON.stringify(t)}(c.title,n),o(c.title),new e(n.title,n.description,n.date),i.reset(),location.reload(),a.style.display=""}))}(h),function(){const e=document.querySelector(".add-category-button"),n=document.querySelector("#category-form"),t=document.querySelector("#category-overlay");e.addEventListener("click",(()=>{!function(e){const n=r();n[e]={title:e,taskItems:[]},window.localStorage.categories=JSON.stringify(n)}(document.querySelector("#newCategoryTitle").value),n.reset(),location.reload(),t.style.display=""}))}(),function(){const e=document.querySelectorAll(".cancel-button"),n=document.querySelectorAll("form"),t=document.querySelectorAll(".overlay");e.forEach((e=>{e.addEventListener("click",(()=>{n.forEach((e=>{e.reset()})),t.forEach((e=>{e.style.display=""}))}))}))}(),function(e){document.querySelectorAll(".category-name").forEach((n=>{n.addEventListener("click",(()=>{o(e[`${n.innerHTML}`].title),location.reload()}))}))}(I)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,